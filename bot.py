import asyncio
import sqlite3
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))
CHANNELS = ['@DartalOmsk', '@DartalSamara', '@DartalChelyabinsk', '@DartalEKB', '@DartalTymen']


# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML) # –î–æ–±–∞–≤–∏–º parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
dp = Dispatcher(bot)


# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_seen TEXT NOT NULL
    )''')
    conn.commit()
    conn.close()

def add_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        current_date = datetime.now().isoformat()
        cursor.execute("INSERT INTO users (user_id, first_seen) VALUES (?, ?)", (user_id, current_date))
        conn.commit()
    conn.close()


# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–ö–ò ---
async def check_subscription(user_id):
    for channel in CHANNELS:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except Exception:
            return False
    return True


# --- –®–ê–ì 1: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start ---
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    add_user(message.from_user.id)
    if await check_subscription(message.from_user.id):
        await send_main_script(message)
    else:
        # –°–æ–∑–¥–∞–µ–º Reply-–∫–Ω–æ–ø–∫—É
        start_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ–ì–û–¢–û–í‚úÖ")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            """–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª —Ç—É–¥–∞, –≥–¥–µ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π Mystery Pack –æ—Ç WB  üëã \n\n–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π "–ø–æ–¥–∞—Ä–æ—á–Ω—ã–π" —Ñ–æ—Ä–º–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —à–∞–Ω—Å –æ—Ç–∫—Ä—ã—Ç—å 1 –ø–∞–∫–µ—Ç –≤ –¥–µ–Ω—å.
–ò–∑ –Ω–µ–≥–æ –≤—ã–ø–∞–¥—É—Ç —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É. –û–¥–∏–Ω –¥–µ–Ω—å ‚Äî –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞.\n\nüéÅ –ß—Ç–æ –≤ –ø—Ä–∏–∑–∞—Ö?\n\n –ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å: –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å—Å—è —á—Ç–æ-—Ç–æ —Å—Ç–æ—è—â–µ–µ, –∞ –º–æ–∂–µ—Ç ‚Äî –ø—É—Å—Ç–æ. üéØ\n\n –ó–¥–µ—Å—å –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–¥–∞—á–∏ –∏ —á—É—Ç—å-—á—É—Ç—å –≤–µ–∑–µ–Ω–∏—è \n \n \n–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?""",
            reply_markup=start_kb
        )


# --- –®–ê–ì 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç Reply-–∫–Ω–æ–ø–∫—É "‚úÖ–ì–û–¢–û–í‚úÖ" ---
@dp.message_handler(lambda message: message.text == "‚úÖ–ì–û–¢–û–í‚úÖ")
async def show_choice_menu(message: types.Message):
    choice_keyboard = InlineKeyboardMarkup(row_width=1)
    choice_keyboard.add(
        InlineKeyboardButton(text="üì±–¢–ï–•–ù–ò–ö–êüì±", callback_data="show_channels_list"),
        InlineKeyboardButton(text="üñ§–ö–û–°–ú–ï–¢–ò–ö–êüñ§", callback_data="show_channels_list"),
        InlineKeyboardButton(text="üíç–£–ö–†–ê–®–ï–ù–ò–Øüíç", callback_data="show_channels_list")
    )
    await message.answer(
        "–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ MYSTERY –ü–ê–ö —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=choice_keyboard
    )


# --- –®–ê–ì 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ—Ö –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query_handler(text="show_channels_list")
async def process_choice_and_show_channels(callback_query: types.CallbackQuery):
    channels_keyboard = InlineKeyboardMarkup(row_width=1)
    for channel_username in CHANNELS:
        link = f"https://t.me/{channel_username[1:]}"
        channels_keyboard.add(InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_username}", url=link))
    channels_keyboard.add(InlineKeyboardButton(text="‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub"))

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = """–û—Ç–ª–∏—á–Ω–æ, –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

–û—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å MYSTERY –ü–ê–ö.
–≠—Ç–∞ –∞–∫—Ü–∏—è –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è –ù–∞—à–∏–º –°–ø–æ–Ω—Å–æ—Ä–∞–º.

–î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø MYSTERY –ü–ê–ö–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤

–ß—Ç–æ–±—ã –ö–∞–Ω–∞–ª—ã –Ω–µ –º–µ—à–∞–ª–∏, –æ—Ç–∫–ª—é—á–∏—Ç–µ –≤ –Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –≤ –ê—Ä—Ö–∏–≤."""

    await callback_query.message.edit_text(text, reply_markup=channels_keyboard)
    await callback_query.answer()


# --- –®–ê–ì 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" ---
@dp.callback_query_handler(text="check_sub")
async def check_sub_callback(callback_query: types.CallbackQuery):
    if await check_subscription(callback_query.from_user.id):
        await callback_query.message.delete()
        await send_main_script(callback_query.message)
    else:
        await callback_query.answer(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
@dp.message_handler(commands=['stats'])
async def get_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(user_id) FROM users")
    total_users = cursor.fetchone()[0]
    current_month = datetime.now().strftime('%Y-%m')
    cursor.execute("SELECT COUNT(user_id) FROM users WHERE strftime('%Y-%m', first_seen) = ?", (current_month,))
    month_users = cursor.fetchone()[0]
    current_day = datetime.now().strftime('%Y-%m-%d')
    cursor.execute("SELECT COUNT(user_id) FROM users WHERE strftime('%Y-%m-%d', first_seen) = ?", (current_day,))
    today_users = cursor.fetchone()[0]
    conn.close()

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë§ <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"üóì <b>–ù–æ–≤—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b> {month_users}\n"
        f"‚òÄÔ∏è <b>–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {today_users}"
    )


# --- –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ (–ö–û–ù–¢–ï–ù–¢) –ü–û–°–õ–ï –ü–û–î–ü–ò–°–ö–ò ---
async def send_main_script(message: types.Message):
    await message.answer("üêô–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!üêô", reply_markup=types.ReplyKeyboardRemove())
    await asyncio.sleep(1)
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏")
    await asyncio.sleep(1)
    await message.answer("–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 24 –¥–æ 72 —á–∞—Å–æ–≤.\n–í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –±—ã–≤–∞—é—Ç –∑–∞–¥–µ—Ä–∂–∫–∏")
    await asyncio.sleep(1)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ‚ò∫Ô∏è")


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)